name: Deploy SpeechAgent with Velopack

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v0.0.2 등의 태그가 푸시될 때 실행
  workflow_dispatch:  # 수동 실행도 가능하게 함
    inputs:
      version:
        description: 'Version to deploy (e.g., 0.0.2)'
        required: true
        default: '0.0.2'

env:
  DOTNET_VERSION: '8.0'
  PROJECT_NAME: 'SpeechAgent'
  RUNTIME: 'win-x64'

jobs:
  deploy:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install Velopack CLI
      run: dotnet tool install -g vpk

    - name: Extract version from tag or input
      id: version
      run: |
        if ("${{ github.event_name }}" -eq "push") {
          $version = "${{ github.ref_name }}" -replace "^v", ""
        } else {
          $version = "${{ github.event.inputs.version }}"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: pwsh

    - name: Update project version
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $csprojPath = "${{ env.PROJECT_NAME }}.csproj"
        
        # csproj 파일에서 VersionPrefix 업데이트
        $content = Get-Content $csprojPath -Raw
        $updatedContent = $content -replace '<VersionPrefix>.*</VersionPrefix>', "<VersionPrefix>$version</VersionPrefix>"
        Set-Content $csprojPath -Value $updatedContent
        
        echo "Updated version to: $version"
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_NAME }}.csproj

    - name: Publish application
      run: |
        dotnet publish ${{ env.PROJECT_NAME }}.csproj `
          --configuration Release `
          --self-contained `
          --runtime ${{ env.RUNTIME }} `
          --output ./publish `
          /p:PublishSingleFile=true `
          /p:IncludeAllContentForSelfExtract=true `
          /p:IncludeNativeLibrariesForSelfExtract=true

    - name: Create Velopack package
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        vpk pack `
          --packId ${{ env.PROJECT_NAME }} `
          --packVersion $version `
          --packDir ./publish `
          --mainExe ${{ env.PROJECT_NAME }}.exe
      shell: pwsh

    - name: Upload to GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $tagName = "v$version"
        
        vpk upload github `
          --repoUrl ${{ github.server_url }}/${{ github.repository }} `
          --publish `
          --releaseName "${{ env.PROJECT_NAME }} $version" `
          --tag $tagName `
          --token ${{ secrets.GIT_TOKEN }}
      shell: pwsh

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: velopack-package-${{ steps.version.outputs.VERSION }}
        path: |
          ./Releases/**/*
          ./publish/**/*
        retention-days: 30