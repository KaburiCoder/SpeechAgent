name: Deploy SpeechAgent with Velopack

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v0.0.2 등의 태그가 푸시될 때 실행
  workflow_dispatch:  # 수동 실행도 가능하게 함
    inputs:
      version:
        description: 'Version to deploy (e.g., 0.0.2)'
        required: true
        default: '0.0.2'

env:
  DOTNET_VERSION: '8.0'
  PROJECT_NAME: 'SpeechAgent'
  RUNTIME: 'win-x64'
  # 한글 인코딩 설정
  DOTNET_CLI_UI_LANGUAGE: 'ko-KR'
  DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 'false'

jobs:
  deploy:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # 한글 로케일 및 인코딩 설정
    - name: Set Korean locale and UTF-8 encoding
      run: |
        # PowerShell에서 UTF-8 인코딩 설정
        $OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8
        [Console]::InputEncoding = [Text.Encoding]::UTF8
        
        # 한국어 문화권 설정
        $culture = [System.Globalization.CultureInfo]::CreateSpecificCulture("ko-KR")
        [System.Threading.Thread]::CurrentThread.CurrentCulture = $culture
        [System.Threading.Thread]::CurrentThread.CurrentUICulture = $culture
        
        # 환경 변수 설정
        echo "LANG=ko_KR.UTF-8" >> $env:GITHUB_ENV
        echo "LC_ALL=ko_KR.UTF-8" >> $env:GITHUB_ENV
        echo "CHCP=65001" >> $env:GITHUB_ENV
        
        # 코드 페이지를 UTF-8로 설정
        chcp 65001
        
        echo "Korean locale and UTF-8 encoding configured"
      shell: pwsh

    # UTF-8 인코딩 확인 및 재설정
    - name: Verify and set file encodings
      run: |
        # TrayIconService.cs 파일을 UTF-8 BOM으로 다시 저장
        $filePath = "Services/TrayIconService.cs"
        if (Test-Path $filePath) {
          $content = Get-Content $filePath -Raw -Encoding UTF8
          $utf8BOM = New-Object System.Text.UTF8Encoding $true
          [System.IO.File]::WriteAllText($filePath, $content, $utf8BOM)
          echo "TrayIconService.cs re-saved with UTF-8 BOM"
        }
        
        # 모든 C# 파일의 인코딩 확인
        Get-ChildItem -Path . -Filter "*.cs" -Recurse | ForEach-Object {
          $content = Get-Content $_.FullName -Raw -Encoding UTF8
          $utf8 = New-Object System.Text.UTF8Encoding $false
          [System.IO.File]::WriteAllText($_.FullName, $content, $utf8)
        }
        echo "All C# files verified for UTF-8 encoding"
      shell: pwsh

    - name: Install Velopack CLI
      run: dotnet tool install -g vpk

    - name: Extract version from tag or input
      id: version
      run: |
        if ("${{ github.event_name }}" -eq "push") {
          $version = "${{ github.ref_name }}" -replace "^v", ""
        } else {
          $version = "${{ github.event.inputs.version }}"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: pwsh

    - name: Update project version
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $csprojPath = "${{ env.PROJECT_NAME }}.csproj"
        
        # csproj 파일에서 VersionPrefix 업데이트 (UTF-8 인코딩으로)
        $content = Get-Content $csprojPath -Raw -Encoding UTF8
        $updatedContent = $content -replace '<VersionPrefix>.*</VersionPrefix>', "<VersionPrefix>$version</VersionPrefix>"
        Set-Content $csprojPath -Value $updatedContent -Encoding UTF8
        
        echo "Updated version to: $version"
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_NAME }}.csproj

    - name: Publish application
      run: |
        dotnet publish ${{ env.PROJECT_NAME }}.csproj `
          --configuration Release `
          --self-contained `
          --runtime ${{ env.RUNTIME }} `
          --output ./publish `
          /p:PublishSingleFile=true `
          /p:IncludeAllContentForSelfExtract=true `
          /p:IncludeNativeLibrariesForSelfExtract=true `
          /p:InvariantGlobalization=false `
          /p:SatelliteResourceLanguages=ko
      shell: pwsh

    - name: Create Velopack package
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        vpk pack `
          --packId ${{ env.PROJECT_NAME }} `
          --packVersion $version `
          --packDir ./publish `
          --mainExe ${{ env.PROJECT_NAME }}.exe
      shell: pwsh

    - name: Upload to GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $tagName = "v$version"
        
        vpk upload github `
          --repoUrl ${{ github.server_url }}/${{ github.repository }} `
          --publish `
          --releaseName "${{ env.PROJECT_NAME }} $version" `
          --tag $tagName `
          --token ${{ secrets.GIT_TOKEN }}
      shell: pwsh

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: velopack-package-${{ steps.version.outputs.VERSION }}
        path: |
          ./Releases/**/*
          ./publish/**/*
        retention-days: 30